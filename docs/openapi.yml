openapi: 3.0.2
info:
  title: Marquez
  version: 0.10.4
  description: Marquez is an open source **metadata service** for the **collection**, **aggregation**,
    and **visualization** of a data ecosystem's metadata.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:5000/api/v1
    description: Local API server
paths:
  /namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    put:
      summary: Create a namespace
      description: Creates a new namespace object. A namespace enables the contextual grouping of related
        jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`), or
        underscores (`_`). A namespace is case-insensitive with a maximum length of `1024` characters.
        Note jobs and datasets will be unique within a namespace, but not across namespaces.
      tags:
        - Namespaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newNamespace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace'
    get:
      summary: Retrieve a namespace
      description: Returns a namespace.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace'

  /namespaces:
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all namespaces
      description: Returns a list of namespaces.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespaces'

  /sources/{source}:
    parameters:
      - $ref: '#/components/parameters/source'
    put:
      summary: Create a source
      description: Creates a new source object. A source is the physical location of a dataset such as
        a table in PostgreSQL, or topic in Kafka. A source enables the grouping of physical datasets
        to their physical source.
      tags:
        - Sources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newSource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/source'
    get:
      summary: Get a source
      description: Returns a source.
      tags:
        - Sources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/source'

  /sources:
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all sources
      description: Returns a list of sources.
      tags:
        - Sources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sources'

  /namespaces/{namespace}/datasets/{dataset}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    put:
      summary: Create a dataset
      description: Creates a new dataset object.
      tags:
        - Datasets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DB_TABLE'
                - $ref: '#/components/schemas/STREAM'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'
    get:
      summary: Get a dataset
      description: Returns a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'

  /namespaces/{namespace}/datasets:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all datasets
      description: Returns a list of datasets.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasets'

  /namespaces/{namespace}/datasets/{dataset}/tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/tag'
    post:
      summary: Tag a dataset
      description: Tag an existing dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'

  /namespaces/{namespace}/datasets/{dataset}/fields/{field}/tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/field'
      - $ref: '#/components/parameters/tag'
    post:
      summary: Tag a field
      description: Tag an existing field of a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taggedField'

  /namespaces/{namespace}/jobs/{job}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
    put:
      summary: Create a job
      description: Creates a new job object. All job objects are immutable and are uniquely identified by a generated ID.
        Marquez will create a version of a job each time the contents of the object is modified. For example, the `location`
        of a job may change over time resulting in new versions. The accumulated versions can be listed, used to rerun a
        specific job version or possibly help debug a failed job run.
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newJob'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'
    get:
      summary: Retrieve a job
      description: Retrieve a job.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job'

  /namespaces/{namespace}/jobs:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all jobs
      description: Returns a list of jobs.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobs'

  /namespaces/{namespace}/jobs/{job}/runs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
    post:
      summary: Create a run
      description: Creates a new run object for a job.
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newRun'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsNew'
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all runs
      description: Returns a list of runs for a job.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runs'

  /jobs/runs/{id}:
    parameters:
      - $ref: '#/components/parameters/runId'
    get:
      summary: Retrieve a run
      description: Retrieve a run.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsNew'

  /jobs/runs/{id}/start:
    parameters:
      - $ref: '#/components/parameters/runId'
    post:
      summary: Start a run
      description: Marks the run as `RUNNING`.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsRunning'

  /jobs/runs/{id}/complete:
    parameters:
      - $ref: '#/components/parameters/runId'
    post:
      summary: Complete a run
      description: Marks the run as `COMPLETED`.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsCompleted'

  /jobs/runs/{id}/fail:
    parameters:
      - $ref: '#/components/parameters/runId'
    post:
      summary: Fail a run
      description: Marks the run as `FAILED`.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsFailed'

  /jobs/runs/{id}/abort:
    parameters:
      - $ref: '#/components/parameters/runId'
    post:
      summary: Abort a run
      description: Marks the run as `ABORTED`.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runAsAborted'

  /tags:
    get:
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all tags
      description: Returns a list of tags.
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags'

components:
  parameters:
    namespace:
      name: namespace
      in: path
      description: The name of the namespace.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: wework

    source:
      name: source
      in: path
      description: The name of the source.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: analytics_db

    dataset:
      name: dataset
      in: path
      description: The name of the dataset.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: wedata.room_bookings

    tag:
      name: tag
      in: path
      description: The name of the tag.
      required: true
      schema:
        type: string
        example: SENSITIVE

    field:
      name: field
      in: path
      description: The name of the field.
      required: true
      schema:
        type: string
        example: member_id

    job:
      name: job
      in: path
      description: The name of the job.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: room_bookings_7_days

    runId:
      name: id
      in: path
      description: The ID of the run.
      required: true
      schema:
        type: string
        format: uuid

    limit:
      name: limit
      in: query
      description: The number of results to return from offset
      required: false
      schema:
        type: integer

    offset:
      name: offset
      in: query
      description: The initial position from which to return results
      required: false
      schema:
        type: integer

  schemas:
    newNamespace:
      type: object
      properties:
        ownerName:
          description: The owner of the namespace.
          type: string
        description:
          description: The description of the namespace.
          type: string
      required:
        - ownerName
      example:
        ownerName: dataengineering
        description: A namespace for core jobs and datasets at wework.

    namespace:
      type: object
      properties:
        name:
          description: The name of the namespace.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was updated.
          type: string
          format: date-time
        ownerName:
          description: The owner of the namespace.
          type: string
        description:
          description: The description of the namespace.
          type: string
      example:
        name: wework
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        ownerName: dataengineering
        description: A namespace for core jobs and datasets at wework.

    namespaces:
      type: object
      properties:
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/namespace'

    newJob:
      type: object
      properties:
        type:
          description: The type of the job.
          type: string
          enum: [BATCH, STREAM, SERVICE]
        inputs:
          description: The list of input datasets.
          type: array
          items:
            type: string
          uniqueItems: true
        outputs:
          description: The list of output datasets.
          type: array
          items:
            type: string
          uniqueItems: true
        location:
          description: The URL of the job source code or artifact.
          type: string
          format: URL
        context:
          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
          type: object
        description:
          description: The description of the job.
          type: string
      required:
        - type
        - inputs
        - outputs
      example:
        type: BATCH
        inputs: ["wedata.room_bookings", "analytics.scheduled_events"]
        outputs: ["wedata.room_bookings_7_days"]
        location: https://github.com/wework/jobs/commit/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c
        context: {'SQL': "SELECT * FROM room_bookings WHERE room_num = '2H';"}
        description: Determine weekly room booking occupancy patterns.
        latestRun: null

    job:
      type: object
      properties:
        type:
          description: The type of the job.
          type: string
        name:
          description: The name of the job.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was updated.
          type: string
          format: date-time
        inputs:
          description: The list of input datasets.
          type: array
          items:
            type: string
          uniqueItems: true
        outputs:
          description: The list of output datasets.
          type: array
          items:
            type: string
          uniqueItems: true
        location:
          description: The URL of the job source code or artifact.
          type: string
          format: URL
        context:
          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
          type: object
        description:
          description: The description of the job.
          type: string
        latestRun:
          description: The latest run of the job.
          type: object
          properties:
            runId:
              description: The ID of the run.
              type: string
              format: uuid
            createdAt:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
              type: string
              format: date-time
            updatedAt:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
              type: string
              format: date-time
            nominalStartTime:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
              type: string
              format: date-time
            nominalEndTime:
              description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
              type: string
              format: date-time
            runState:
              description: The current state of the run.
              type: string
              enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
            runArgs:
              description: The arguments of the run.
              type: object
      example:
        type: BATCH
        name: room_bookings_7_days
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        inputs: ["wedata.room_bookings", "analytics.scheduled_events"]
        outputs: ["wedata.room_bookings_7_days"]
        location: https://github.com/wework/jobs/commit/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c
        context: {'SQL': "SELECT * FROM room_bookings WHERE room_num = '2H';"}
        description: Determine weekly room booking occupancy patterns.
        latestRun: null

    jobs:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/job'

    newRun:
      type: object
      properties:
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runId:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90

    runAsNew:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runState:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        startedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was started (went from NEW to RUNNING). Or null if not started.
          type: string
          format: date-time
        endedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was ended (went from RUNNING to COMPLETED|ABORTED|FAILED). Or null if not finished.
          type: string
          format: date-time
        duration:
          description: The duration of the run (time in ms elapsed between startedAt and endedAt if present)
          type: number
          format: int64
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        runState: NEW
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runAsRunning:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runState:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        runState: RUNNING
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runAsCompleted:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runState:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        runState: COMPLETED
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runAsFailed:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runState:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        runState: FAILED
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runAsAborted:
      type: object
      properties:
        runId:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        runState:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        runArgs:
          description: The arguments of the run.
          type: object
      example:
        runId: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        runState: ABORTED
        runArgs: {'email': 'data@wework.com', 'emailOnFailure': "false", 'emailOnRetry': "true", 'retries': "1"}

    runs:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/runAsNew'

    DB_TABLE:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: enum
          enum: [DB_TABLE]
        physicalName:
          description: The physical name of the table.
          type: string
        sourceName:
          description: The name of the source associated with the table.
          type: string
        fields:
          description: The fields of the table.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The type of the field.
                type: enum
              tags:
                description: List of tags.
                type: array
              description:
                description: The description of the field.
                type: string 
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: array
        description:
          description:  The description of the table.
          type: string
        runId:
          description: The ID associated with the run modifying the table.
          type: string
      required:
        - type
        - physicalName
        - sourceName
      example:
        type: DB_TABLE
        physicalName: wedata.room_bookings
        sourceName: analytics_db
        fields: [
          {'name': 'booking_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'booked_at', 'type': 'TIMESTAMP', 'tags': []},
          {'name': 'office_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'room_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'member_id', 'type': 'INTEGER', 'tags': []}
        ]
        tags: ['SENSITIVE']
        description: "All room booking occupancy data."

    STREAM:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: enum
          enum: [STREAM]
        physicalName:
          description: The physical name of the stream.
          type: string
        sourceName:
          description: The name of the source associated with the stream.
          type: string
        schemaLocation:
          description: The URL of the schema for the stream.
          type: string
        fields:
          description: The schema fields of the stream.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The type of the field.
                type: enum
              tags:
                description: List of tags.
                type: array
              description:
                description: The description of the field.
                type: string 
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: array
        description:
          description: The description of the stream.
          type: string
        runId:
          description: The ID associated with the run modifying the stream.
          type: string
      required:
        - type
        - physicalName
        - sourceName
        - schemaLocation
      example:
        type: STREAM
        physicalName: tracking.wedata.room_bookings
        sourceName: kafka_prod
        schemaLocation: 'http://localhost:8081/schemas/ids/1'
        tags: []
        description: "A stream of room booking occupancy data."

    dataset:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: string
        name:
          description: The name of the dataset.
          type: string
        physicalName:
          description: The physical name of the dataset.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was updated.
          type: string
          format: date-time
        sourceName:
          description: The name of the source associated with the dataset.
          type: string
        fields:
          description: The fields of the dataset.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The type of the field.
                type: enum
              tags:
                description: List of tags.
                type: array
              description:
                description: The description of the field.
                type: string 
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: array
        lastModifiedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was last modified by a successful run.
          type: string
          format: date-time
        description:
          description:  The description of the dataset.
          type: string
      example:
        type: DB_TABLE
        name: wedata.room_bookings
        physicalName: wedata.room_bookings
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        sourceName: analytics_db
        fields: [
          {'name': 'booking_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'booked_at', 'type': 'TIMESTAMP', 'tags': []},
          {'name': 'office_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'room_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'member_id', 'type': 'INTEGER', 'tags': []}
        ]
        tags: ['SENSITIVE']
        lastModifiedAt: null
        description: "All room booking occupancy data."

    datasets:
      type: object
      properties:
        datasets:
          items:
            $ref: '#/components/schemas/dataset'

    taggedField:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: string
        name:
          description: The name of the dataset.
          type: string
        physicalName:
          description: The physical name of the dataset.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was updated.
          type: string
          format: date-time
        sourceName:
          description: The name of the source associated with the dataset.
          type: string
        fields:
          description: The fields of the dataset.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The type of the field.
                type: enum
              tags:
                description: List of tags.
                type: array
              description:
                description: The description of the field.
                type: string 
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: array
        lastModifiedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was last modified by a successful run.
          type: string
          format: date-time
        description:
          description:  The description of the dataset.
          type: string
      example:
        type: DB_TABLE
        name: wedata.room_bookings
        physicalName: wedata.room_bookings
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        sourceName: analytics_db
        fields: [
          {'name': 'booking_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'booked_at', 'type': 'TIMESTAMP', 'tags': []},
          {'name': 'office_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'room_id', 'type': 'INTEGER', 'tags': []},
          {'name': 'member_id', 'type': 'INTEGER', 'tags': ['SENSITIVE']}
        ]
        tags: ['SENSITIVE']
        lastModifiedAt: null
        description: "All room booking occupancy data."

    newSource:
      type: object
      properties:
        type:
          description: The type of the source.
          type: string
          enum: [MYSQL, POSTGRESQL, REDSHIFT, SNOWFLAKE, KAFKA]
        connectionUrl:
          description: The URL to be used to connect to the source.
          type: string
          format: URL
        description:
          description:  The description of the source.
          type: string
      required:
        - type
        - connectionUrl
      example:
        type: POSTGRESQL
        connectionUrl: jdbc:postgresql://localhost:5431/reports

    source:
      type: object
      properties:
        type:
          description: The type of the source.
          type: string
        name:
          description: The name of the source.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was updated.
          type: string
          format: date-time
        connectionUrl:
          description: The URL to be used to connect to the source.
          type: string
          format: URL
        description:
          description:  The description of the dataset.
          type: string
      example:
        type: POSTGRESQL
        name: analytics_db
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        connectionUrl: jdbc:postgresql://localhost:5431/reports

    sources:
      type: object
      properties:
        sources:
          items:
            $ref: '#/components/schemas/source'

    tag:
      type: object
      properties:
        name:
          description: The name of the tag.
          type: string
        description:
          description: The description of the tag.
          type: string
      example:
        name: SENSITIVE
        description: Contains sensitive information

    tags:
      type: object
      properties:
        tags:
          items:
            $ref: '#/components/schemas/tag'
