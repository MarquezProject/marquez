# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.2
info:
  title: Marquez
  version: 0.26.0-SNAPSHOT
  description: Marquez is an open source **metadata service** for the **collection**, **aggregation**,
    and **visualization** of a data ecosystem's metadata.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:5000/api/v1
    description: Local API server
paths:
  /namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/namespace'
    put:
      operationId: putNamespace
      summary: Create a namespace
      description: Creates a new namespace object. A namespace enables the contextual grouping of related
        jobs and datasets. Namespaces must contain only letters (`a-z`, `A-Z`), numbers (`0-9`),
        underscores (`_`), dashes (`-`), colons (`:`), slashes (`/`), or dots (`.`).
        A namespace is case-insensitive with a maximum length of `1024` characters.
        Note jobs and datasets will be unique within a namespace, but not across namespaces.
      tags:
        - Namespaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedNamespace'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    get:
      operationId: getNamespace
      summary: Retrieve a namespace
      description: Returns a namespace.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'

  /namespaces:
    get:
      operationId: getNamespaces
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all namespaces
      description: Returns a list of namespaces.
      tags:
        - Namespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceList'

  /sources/{source}:
    parameters:
      - $ref: '#/components/parameters/source'
    put:
      operationId: putSource
      summary: Create a source
      description: Creates a new source object. A source is the physical location of a dataset such as
        a table in PostgreSQL, or topic in Kafka. A source enables the grouping of physical datasets
        to their physical source.
      deprecated: true
      tags:
        - Sources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedSource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
    get:
      operationId: getSource
      summary: Retrieve a source
      description: Returns a source.
      tags:
        - Sources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'

  /sources:
    get:
      operationId: getSources
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all sources
      description: Returns a list of sources.
      tags:
        - Sources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceList'

  /namespaces/{namespace}/datasets/{dataset}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    put:
      operationId: putDataset
      summary: Create a dataset
      description: Creates a new dataset.
      deprecated: true
      tags:
        - Datasets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/DbTable'
                - $ref: '#/components/schemas/Stream'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
    get:
      operationId: getDataset
      summary: Retrieve a dataset
      description: Returns a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /namespaces/{namespace}/datasets/{dataset}/versions/{version}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/version'
    get:
      operationId: getDatasetVersion
      summary: Retrieve a version for a dataset
      description: Returns a version for a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetVersion'

  /namespaces/{namespace}/datasets/{dataset}/versions:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      operationId: getDatasetVersions
      summary: List all versions for a dataset
      description: Returns a list of versions for a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetVersionList'

  /namespaces/{namespace}/datasets:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
    get:
      operationId: getDatasets
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all datasets
      description: Returns a list of datasets.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetList'

  /namespaces/{namespace}/datasets/{dataset}/tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/tag'
    post:
      operationId: addTagToDataset
      summary: Tag a dataset
      description: Tag an existing dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /namespaces/{namespace}/datasets/{dataset}/fields/{field}/tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/dataset'
      - $ref: '#/components/parameters/field'
      - $ref: '#/components/parameters/tag'
    post:
      operationId: addTagToFieldOfDataset
      summary: Tag a field
      description: Tag an existing field of a dataset.
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /namespaces/{namespace}/jobs/{job}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
    put:
      operationId: putJob
      summary: Create a job
      description: Creates a new job object. All job objects are immutable and are uniquely identified by a generated ID.
        Marquez will create a version of a job each time the contents of the object is modified. For example, the `location`
        of a job may change over time resulting in new versions. The accumulated versions can be listed, used to rerun a
        specific job version or possibly help debug a failed job run.
      deprecated: true
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedJob'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    get:
      operationId: getJob
      summary: Retrieve a job
      description: Retrieve a job.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

  /namespaces/{namespace}/jobs:
    parameters:
      - $ref: '#/components/parameters/namespace'
    get:
      operationId: getJobs
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all jobs
      description: Returns a list of jobs.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'

  /namespaces/{namespace}/jobs/{job}/versions/{version}:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
      - $ref: '#/components/parameters/version'
    get:
      operationId: getJobVersion
      summary: Retrieve a version for a job
      description: Returns a version for a job.
      tags:
        - Jobs
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobVersion'

  /namespaces/{namespace}/jobs/{job}/versions:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
    get:
      operationId: getJobVersions
      summary: List all versions for a job
      description: Returns a list of versions for a job.
      tags:
        - Jobs
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobVersionList'

  /namespaces/{namespace}/jobs/{job}/runs:
    parameters:
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/job'
    post:
      operationId: createRun
      summary: Create a run
      description: Creates a new run object for a job.
      deprecated: true
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedRun'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
    get:
      operationId: getRuns
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all runs
      description: Returns a list of runs for a job.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunList'

  /jobs/runs/{id}:
    parameters:
      - $ref: '#/components/parameters/runId'
    get:
      operationId: getRun
      summary: Retrieve a run
      description: Retrieve a run.
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteRun'

  /jobs/runs/{id}/start:
    parameters:
      - $ref: '#/components/parameters/runId'
      - $ref: '#/components/parameters/at'
    post:
      operationId: startRun
      summary: Start a run
      description: Marks the run as `RUNNING`.
      deprecated: true
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteRun'

  /jobs/runs/{id}/complete:
    parameters:
      - $ref: '#/components/parameters/runId'
      - $ref: '#/components/parameters/at'
    post:
      operationId: completeRun
      summary: Complete a run
      description: Marks the run as `COMPLETED`.
      deprecated: true
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'

  /jobs/runs/{id}/fail:
    parameters:
      - $ref: '#/components/parameters/runId'
      - $ref: '#/components/parameters/at'
    post:
      operationId: failRun
      summary: Fail a run
      description: Marks the run as `FAILED`.
      deprecated: true
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteRun'

  /jobs/runs/{id}/abort:
    parameters:
      - $ref: '#/components/parameters/runId'
      - $ref: '#/components/parameters/at'
    post:
      operationId: abortRun
      summary: Abort a run
      description: Marks the run as `ABORTED`.
      deprecated: true
      tags:
        - Jobs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteRun'

  /lineage:
    post:
      operationId: recordLineage
      summary: Record a single lineage event
      description: Receive, process, and store lineage metadata using the [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json) standard.
      tags:
        - Lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineageEvent'
      responses:
        '200':
          description: OK
    get:
      operationId: getLineage
      parameters:
        - $ref: '#/components/parameters/nodeId'
        - $ref: '#/components/parameters/depth'
      tags:
        - Lineage
      summary: Get a lineage graph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineageGraph'

  /tags/{tag}:
    parameters:
      - $ref: '#/components/parameters/tag'
    put:
      operationId: putTag
      summary: Create a tag
      description: Creates a new tag object.
      tags:
        - Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedTag'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'

  /tags:
    get:
      operationId: getTags
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      summary: List all tags
      description: Returns a list of tags.
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'

  /search:
    get:
      operationId: search
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/limit'
      summary: Query all datasets and jobs
      description: Returns one or more datasets and jobs of your query.
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultList'

components:
  parameters:
    at:
      name: at
      in: query
      description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the time when the run transitioned.
      required: false
      schema:
        type: string
        format: date-time

    namespace:
      name: namespace
      in: path
      description: The name of the namespace.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-namespace

    source:
      name: source
      in: path
      description: The name of the source.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-source

    dataset:
      name: dataset
      in: path
      description: The name of the dataset.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-dataset

    tag:
      name: tag
      in: path
      description: The name of the tag.
      required: true
      schema:
        type: string
        example: SENSITIVE

    field:
      name: field
      in: path
      description: The name of the field.
      required: true
      schema:
        type: string
        example: my_field

    job:
      name: job
      in: path
      description: The name of the job.
      required: true
      schema:
        type: string
        maxLength: 1024
        example: my-job

    runId:
      name: id
      in: path
      description: The ID of the run.
      required: true
      schema:
        type: string
        format: uuid
        example: ea9badc5-7cb2-49af-9a9f-155771d3a797

    version:
      name: version
      in: path
      description: The ID of the job or dataset version.
      required: true
      schema:
        type: string
        format: uuid
        example: ea9badc5-7cb2-49af-9a9f-155771d3a797

    limit:
      name: limit
      in: query
      description: The number of results to return from offset
      required: false
      schema:
        type: integer
        example: 25
        default: 100

    offset:
      name: offset
      in: query
      description: The initial position from which to return results
      required: false
      schema:
        type: integer
        default: 0

    nodeId:
      name: nodeId
      in: query
      schema:
        type: string
        example: dataset:food_delivery:public.delivery_7_days
      description: The ID of the node.
      required: true

    depth:
      name: depth
      in: query
      schema:
        type: integer
        default: 20
      description: Depth of lineage graph to create.
      required: false

    q:
      name: q
      in: query
      schema:
        type: string
        example: my-dataset
        description: Query containing pattern to match; datasets and jobs pattern matching is string based
          and case-insensitive. Use percent sign (`%`) to match any string of zero or more characters (`my-job%`),
          or an underscore (`_`) to match a single character (`_job_`).
      required: true

    filter:
      name: filter
      in: query
      schema:
        type: string
        example: dataset
        description: Filters the results of your query by `dataset` or `job`.
      required: false

    sort:
      name: sort
      in: query
      schema:
        type: string
        example: name
        description: Sorts the results of your query by `name` or `updated_at`.
      required: false

  schemas:
    CreatedNamespace:
      type: object
      properties:
        ownerName:
          description: The owner of the namespace.
          type: string
        description:
          description: The description of the namespace.
          type: string
      required:
        - ownerName
      example:
        ownerName: me
        description: My first namespace!

    Namespace:
      type: object
      properties:
        name:
          description: The name of the namespace.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the namespace was updated.
          type: string
          format: date-time
        ownerName:
          description: The owner of the namespace.
          type: string
        description:
          description: The description of the namespace.
          type: string
      example:
        name: my-namespace
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        ownerName: me
        description: My first namespace!

    NamespaceList:
      type: object
      properties:
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/Namespace'

    CreatedSource:
      type: object
      properties:
        type:
          description: The type of the source.
          type: string
        connectionUrl:
          description: The URL to the location of the source.
          type: string
          format: URL
        description:
          description:  The description of the source.
          type: string
      required:
        - type
        - connectionUrl
      example:
        type: POSTGRESQL
        connectionUrl: jdbc:postgresql://db.example.com/mydb
        description: My first source!

    Source:
      type: object
      properties:
        type:
          description: The type of the source.
          type: string
        name:
          description: The name of the source.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the source was updated.
          type: string
          format: date-time
        connectionUrl:
          description: The URL to the location of the source.
          type: string
          format: URL
        description:
          description:  The description of the dataset.
          type: string
      example:
        type: POSTGRESQL
        name: my-source
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        connectionUrl: jdbc:postgresql://db.example.com/mydb
        description: My first source!

    SourceList:
      type: object
      properties:
        sources:
          items:
            $ref: '#/components/schemas/Source'

    DatasetType:
      type: enum
      enum: [DB_TABLE, STREAM]
      description: The type of dataset

    DbTable:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: string
          enum: [DB_TABLE]
        physicalName:
          description: The **physical** name of the table.
          type: string
        sourceName:
          description: The name of the source associated with the table.
          type: string
        fields:
          description: The fields of the table.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The data type of the field.
                type: string
              tags:
                description: List of tags.
                type: string
              description:
                description: The description of the field.
                type: string
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: array
          items:
            type: string
        description:
          description:  The description of the table.
          type: string
        runId:
          description: The ID associated with the run modifying the table.
          type: string
      required:
        - type
        - physicalName
        - sourceName
        - fields
      example:
        type: DB_TABLE
        physicalName: public.mytable
        sourceName: my-source
        fields: [
          {name: a, type: INTEGER},
          {name: b, type: TIMESTAMP},
          {name: c, type: INTEGER},
          {name: d, type: INTEGER}
        ]
        description: "My first dataset!"

    Stream:
      type: object
      properties:
        type:
          description: The type of the dataset.
          type: string
          enum: [STREAM]
        physicalName:
          description: The **physical** name of the stream.
          type: string
        sourceName:
          description: The name of the source associated with the stream.
          type: string
        schemaLocation:
          description: The URL of the schema for the stream data.
          type: string
        fields:
          description: The schema fields for the stream data.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The type of the field.
                type: string
              tags:
                description: List of tags.
                type: string
              description:
                description: The description of the field.
                type: string
            required:
              - name
              - type
        tags:
          description: List of tags.
          type: string
        description:
          description: The description of the stream.
          type: string
        runId:
          description: The ID associated with the run modifying the stream.
          type: string
      required:
        - type
        - physicalName
        - sourceName
        - fields
        - schemaLocation
      example:
        type: STREAM
        physicalName: my-stream
        sourceName: my-stream-source
        schemaLocation: 'http://registry.example.com/schemas/ids/1'
        fields: []
        description: "My first stream dataset!"

    DatasetId:
      type: object
      description: The ID of the dataset.
      properties:
        namespace:
          type: string
          description: The namespace of the dataset.
        name:
          type: string
          description: The name of the dataset.

    Dataset:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DatasetId'
        type:
          description: The type of the dataset.
          type: string
        name:
          description: The **logical** name of the dataset.
          type: string
        physicalName:
          description: The **physical** name of the dataset.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was updated.
          type: string
          format: date-time
        namespace:
          type: string
          description: The namespace of the dataset.
        sourceName:
          description: The name of the source associated with the dataset.
          type: string
        fields:
          description: The fields of the dataset.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The data type of the field.
                type: string
              tags:
                description: List of tags.
                type: array
                items: 
                  type: string
              description:
                description: The description of the field.
                type: string
        tags:
          description: List of tags.
          type: array
          items:
            type: string
        lastModifiedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was last modified by a successful run.
          type: string
          format: date-time
        lastLifecycleState:
          description: The last lifecycle state of the dataset.
          type: string
        description:
          description: The description of the dataset.
          type: string
        facets:
          $ref: '#/components/schemas/DatasetFacets'
        currentVersion:
          description: The current version of the dataset.
          type: string
          format: uuid
        deleted:
          description: The deleted state of the dataset.
          type: boolean
      example:
        id:
          namespace: my-namespace
          name: my-dataset
        type: DB_TABLE
        name: my-dataset
        physicalName: public.mytable
        createdAt: 2019-05-09T19:49:24.201361Z
        upodatedAt: 2019-05-09T19:49:24.201361Z
        namespace: my-namespace
        sourceName: my-source
        fields: [
          {name': a, type: INTEGER, tags: []},
          {name': b, type: TIMESTAMP, tags: []},
          {name': c, type: INTEGER, tags: []},
          {name': d, type: INTEGER, tags: []}
        ]
        tags: []
        lastModifiedAt: null
        description: "My first dataset!"
        facets: {}
        currentVersion: "b1d626a2-6d3a-475e-9ecf-943176d4a8c6"

    DatasetList:
      type: object
      properties:
        datasets:
          items:
            $ref: '#/components/schemas/Dataset'
        totalCount:
          type: number
          description: The total number of datasets for the given namespace
      required:
        - datasets

    DatasetVersionId:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the dataset.
        name:
          type: string
          description: The name of the dataset.
        version:
          type: string
          format: uuid
          description: The version of the dataset.
      required:
        - namespace
        - name
        - version

    DatasetVersion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DatasetVersionId'
        type:
          description: The type of the dataset.
          type: string
        name:
          description: The **logical** name of the dataset.
          type: string
        physicalName:
          description: The **physical** name of the dataset.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset was created.
          type: string
          format: date-time
        version:
          description: The ID of the dataset version.
          type: string
        namespace:
          type: string
          description: The namespace of the dataset.
        sourceName:
          description: The name of the source associated with the dataset.
          type: string
        fields:
          description: The fields of the dataset.
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the field.
                type: string
              type:
                description: The data type of the field.
                type: string
              tags:
                description: List of tags.
                type: string
              description:
                description: The description of the field.
                type: string
        tags:
          description: List of tags.
          type: string
        description:
          description:  The description of the dataset.
          type: string
        createdByRun:
          $ref: '#/components/schemas/Run'
        facets:
          $ref: '#/components/schemas/DatasetFacets'
      required:
        - id
        - type
        - name
        - physicalName
        - createdAt
        - version
        - namespace
        - sourceName
        - description
      example:
        id:
          namespace: my-namespace
          name: my-dataset
        type: DB_TABLE
        name: my-dataset
        physicalName: public.mytable
        createdAt: 2019-05-09T19:49:24.201361Z
        version: d224dac0-35d7-4d9b-bbbe-6fff1a8485ad
        namespace: my-namespace
        sourceName: my-source
        fields: [
          {name: a, type: INTEGER, tags: []},
          {name: b, type: TIMESTAMP, tags: []},
          {name: c, type: INTEGER, tags: []},
          {name: d, type: INTEGER, tags: []}
        ]
        tags: []
        description: "My first dataset!"
        createdByRun: {
          "id": "0e89b60a-d80d-42ae-a12b-bd79ae1fb576",
          "createdAt": "2019-05-09T18:52:35.620763Z",
          "updatedAt": "2019-05-09T18:53:41.461122Z",
          "nominalStartTime": null,
          "nominalEndTime": null,
          "state": "COMPLETED",
          "startedAt": "2021-02-05T18:53:33.245492Z",
          "endedAt": "2021-02-05T18:53:41.461122Z",
          "durationMs": 8216,
          "args": { 'email': 'me@example.com', 'emailOnFailure': false, 'emailOnRetry': true, 'retries': 1 },
          "jobVersion": {
            "namespace": "my-namespace",
            "name": "my_processing_job",
            "version": "0ba5b13b-350e-40f3-ba3f-cc00a4e92d11"
          },
          "inputVersions": [
            {
              "namespace": "my-namespace",
              "name": "an_input_dataset",
              "version": "d224dac0-35d7-4d9b-bbbe-6fff1a8485ad"
            }
          ],
          "outputVersions": [
            {
              "namespace": "my-namespace",
              "name": "my-dataset",
              "version": "16e04029-2035-37f1-8206-d57be374333f"
            }
          ]
        }

    DatasetVersionList:
      type: object
      properties:
        versions:
          items:
            $ref: '#/components/schemas/DatasetVersion'

    Tag:
      type: object
      properties:
        name:
          description: The name of the tag.
          type: string
        description:
          description: The description of the tag.
          type: string
      example:
        name: SENSITIVE
        description: Contains sensitive information

    TagList:
      type: object
      properties:
        tags:
          items:
            $ref: '#/components/schemas/Tag'

    JobType:
      type: enum
      enum: [BATCH, STREAM, SERVICE]
      description: The type of the job.

    CreatedJob:
      type: object
      properties:
        id:
          description: The ID of the job.
          type: object
          properties:
            namespace:
              type: string
              description: The namespace of the job.
            name:
              type: string
              description: The name of the job.
        type:
          $ref: '#/components/schemas/JobType'
        inputs:
          description: The set of **input** datasets.
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        outputs:
          description: The set of **output** datasets.
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        location:
          description: The URL of the job source code or artifact.
          type: string
          format: URL
        context:
          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
          type: object
          deprecated: true
        description:
          description: The description of the job.
          type: string
        runId:
          description: An _optional_ run ID used to associate a job version to an existing job run.
          type: string
      required:
        - type
        - inputs
        - outputs
      example:
        type: BATCH
        inputs: [{ namespace: my-namespace, name: my-dataset}]
        outputs: []
        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c
        context: {sql: 'SELECT * FROM mytable;'}
        description: My first job!

    JobId:
      description: The ID of the job.
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the job.
        name:
          type: string
          description: The name of the job.
    Job:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/JobId'
        type:
          description: The type of the job.
          type: string
        name:
          description: The name of the job.
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was updated.
          type: string
          format: date-time
        namespace:
          description: The namespace of the job.
          type: string
        inputs:
          description: The set of **input** datasets.
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        outputs:
          description: The set of **output** datasets.
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        location:
          description: The URL of the job source code or artifact.
          type: string
          format: URL
        context:
          description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
          type: object
          deprecated: true
        description:
          description: The description of the job.
          type: string
        latestRun:
          $ref: '#/components/schemas/Run'
        facets:
          $ref: '#/components/schemas/JobFacets'
        currentVersion:
          description: The current version of the job.
          type: string
          format: uuid
      example:
        id:
          namespace: my-namespace
          name: my-job
        type: BATCH
        name: my-job
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        namespace: my-namespace
        inputs: [{namespace: my-namespace, name: my-dataset}]
        outputs: []
        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c
        context: {'SQL': "SELECT * FROM mytable;"}
        description: My first job!
        latestRun: null
        facets: {}
        currentVersion: "b1d626a2-6d3a-475e-9ecf-943176d4a8c6"

    JobVersionList:
      type: object
      properties:
        versions:
          items:
            $ref: '#/components/schemas/JobVersion'

    JobVersionId:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of the job.
        name:
          type: string
          description: The name of the job.
        version:
          type: string
          format: uuid
          description: The version of the job.

    JobVersion:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/JobVersionId'
        name:
          description: The name of the job.
          type: string
        version:
          description: The version of the job
          type: string
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job version was created.
          type: string
          format: date-time
        namespace:
          description: The namespace of the job.
          type: string
        inputs:
          description: The set of **input** datasets
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        outputs:
          description: The set of **output** datasets
          type: array
          items:
            $ref: '#/components/schemas/DatasetId'
          uniqueItems: true
        location:
          description: The URL of the job source code or artifact for the given job version.
          type: string
          format: URL
        context:
          description: Deprecated- Use facet. A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
          type: object
          deprecated: true
        latestRun:
          $ref: '#/components/schemas/Run'
        facets:
          $ref: '#/components/schemas/JobFacets'
      example:
        id:
          namespace: my-namespace
          name: my-job
          version: 56472c57-a2ef-4218-b7b7-d2af02a343fd
        type: BATCH
        name: my-job
        version: 56472c57-a2ef-4218-b7b7-d2af02a343fd
        createdAt: 2019-05-09T19:49:24.201361Z
        namespace: my-namespace
        inputs: [{namespace: my-namespace, name: my-dataset}]
        outputs: []
        location: https://github.com/my-jobs/blob/124f6089ad4c5fcbb1d7b33cbb5d3a9521c5d32c
        context: {'SQL': "SELECT * FROM mytable;"}
        description: My first job!
        facets: {}

    JobList:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        totalCount:
          type: number
          description: The total number of jobs for the given namespace

    CreatedRun:
      type: object
      properties:
        id:
          description: An _optional_ user-provided unique ID of the run. A run ID **must** be an [UUID](https://tools.ietf.org/html/rfc4122).
                       If an ID for the run is not provided, a random UUID will be generated for the given run.
          type: string
          format: uuid
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        args:
          description: The arguments of the run.
          type: object
      example:
        args: {'email': 'me@example.com', 'emailOnFailure': false, 'emailOnRetry': true, 'retries': 1}

    IncompleteRun:
      type: object
      properties:
        id:
          description: The ID of the run.
          type: string
          format: uuid
        createdAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was created.
          type: string
          format: date-time
        updatedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the run was updated.
          type: string
          format: date-time
        nominalStartTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal start time of the run.
          type: string
          format: date-time
        nominalEndTime:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the nominal end time of the run.
          type: string
          format: date-time
        state:
          description: The current state of the run.
          type: string
          enum: [NEW, RUNNING, COMPLETED, FAILED, ABORTED]
        startedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the start time of the run.
          type: string
          format: date-time
        endedAt:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the end time of the run.
          type: string
          format: date-time
        durationMs:
          type: integer
          description: The total duration of the run. Measured in milliseconds.
        args:
          description: The arguments of the run.
          type: object
        facets:
          $ref: '#/components/schemas/RunFacets'
      example:
        id: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        state: RUNNING
        startedAt: 2019-05-09T15:17:32.690346
        endedAt: null
        durationMs: null
        args: {'email': 'me@example.com', 'emailOnFailure': 'false', 'emailOnRetry': 'true', 'retries': '1'}
        facets: {}

    Run:
      type: object
      allOf:
        - $ref: '#/components/schemas/IncompleteRun'
        - type: object
          properties:
            jobVersion:
              $ref: '#/components/schemas/JobVersionId'
            inputVersions:
              type: array
              items:
                $ref: '#/components/schemas/DatasetVersionId'
            outputVersions:
              type: array
              items:
                $ref: '#/components/schemas/DatasetVersionId'
            context:
              description: A key/value pair that must be of type `string`. A context can be used for getting additional details about the job.
              type: object
              deprecated: true
            facets:
              $ref: '#/components/schemas/RunFacets'
      example:
        id: 870492da-ecfb-4be0-91b9-9a89ddd3db90
        createdAt: 2019-05-09T19:49:24.201361Z
        updatedAt: 2019-05-09T19:49:24.201361Z
        nominalStartTime: null
        nominalEndTime: null
        state: COMPLETED
        startedAt: 2019-05-09T15:17:32.690346
        endedAt: 2019-05-09T20:05:46.815920Z
        durationMs: 4250894125
        args: {'email': 'me@example.com', 'emailOnFailure': 'false', 'emailOnRetry': 'true', 'retries': '1'}
        context: {'SQL': "SELECT * FROM mytable;"}
        facets: {}

    RunList:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/Run'

    DatasetFacets:
      description: The facets of the dataset. For a full list of standard dataset facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomFacet'

    JobFacets:
      description: The facets of the job. For a full list of standard job facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomFacet'

    RunFacets:
      description: The facets of the run. For a full list of standard run facets, see [OpenLineage](https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md#standard-facets).
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomFacet'

    CustomFacet:
      description: A custom facet enables the extension of _dataset_, _job_, and _run_ metadata. A custom facet **must** also have a schema,
                   where a version of the schema is identifiable via a URL. A field within the schema **must** not start with an underscore (`_`).
      allOf:
        - $ref: '#/components/schemas/BaseFacet'
        - type: object
          additionalProperties: true

    BaseFacet:
      description: All base facet fields are prefixed with an underscore (`_`) to avoid field naming conflicts defined with other facets.
      type: object
      properties:
        _producer:
          description: URI identifying the producer of this metadata. For example this could be a git url with a given tag or sha
          type: string
          format: uri
          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client
        _schemaURL:
          description: The URL to the corresponding version of the schema definition following a $ref URL Reference (see https://swagger.io/docs/specification/using-ref/)
          type: string
          format: uri
          example: https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.yml#MyCustomJobFacet
      required:
        - _producer
        - _schemaURL

    LineageGraph:
      type: object
      properties:
        graph:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'

    GraphNode:
      type: object
      properties:
        id:
          type: string
          description: The ID of the node.
        type:
          $ref: '#/components/schemas/NodeType'
        data:
          type: object
          description: The data of the node.
          discriminator:
            propertyName: type
            mapping:
              'DATASET': '#/components/schemas/Dataset'
              'JOB': '#/components/schemas/Job'
          oneOf:
            - $ref: '#/components/schemas/Dataset'
            - $ref: '#/components/schemas/Job'
        inEdges:
          type: array
          description: The in edges of the node.
          items:
            $ref: '#/components/schemas/GraphEdge'
        outEdges:
          type: array
          description: The out edges of the node.
          items:
            $ref: '#/components/schemas/GraphEdge'

    NodeType:
      type: enum
      enum: [ JOB, DATASET ]
      description: The type of the diff node.

    GraphEdge:
      type: object
      properties:
        origin:
          description: The ID of the origin node.
          type: string
        destination:
          description: The ID of the destination node.
          type: string

    CreatedTag:
      type: object
      properties:
        description:
          description: The description of the tag.
          type: string
      example:
        description: My first tag!

    LineageEvent:
      example:
        eventType: COMPLETE
        eventTime: 2019-05-09T19:49:24.201361Z
        run: {runId: d46e465b-d358-4d32-83d4-df660ff614dd}
        job: {namespace: my-namespace,name: my-job}
        outputs: [{
          namespace: my-namespace,
          name: my-output,
          facets: {
            schema: {
              _producer: "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client",
              _schemaURL: "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/spec/OpenLineage.json#/definitions/SchemaDatasetFacet",
              fields: [
                {name: a, type: INTEGER},
                {name: b, type: TIMESTAMP},
                {name: c, type: INTEGER},
                {name: d, type: INTEGER}
              ]
            }
          }
        }]
        producer: "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"

    SearchResultList:
      type: object
      properties:
        totalCount:
          description: Total number of search results.
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'

    SearchResult:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SearchResultType'
        name:
          type:
          description: The name of the dataset or job.
          example: public.delivery_7_days
        updatedAt:
          type:
          description: An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the dataset or job was updated.
          example: 2019-05-09T19:49:24.201361Z
        namespace:
          type: string
          description: The namespace of the dataset or job.
          example: food_delivery
        nodeId:
          type: string
          description: The ID of the dataset or job node.
          example: dataset:food_delivery:public.delivery_7_days

    SearchResultType:
      type: enum
      enum: [DATASET, JOB]
      description: The type of search result.
      example: DATASET
