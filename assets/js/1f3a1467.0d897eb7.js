"use strict";(self.webpackChunkmarquez_website_docs=self.webpackChunkmarquez_website_docs||[]).push([[6968],{67790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const i={slug:"column-lineage-demo",description:"How to get started with the new column lineage feature in Marquez.",title:"Trying Out the New Column Lineage Feature",authors:["Leszczynski","Robinson"],tags:["column lineage","Spark","releases","demos"]},r=void 0,l={permalink:"/blog/column-lineage-demo",editUrl:"https://github.com/MarquezProject/marquez/tree/docs/v2/docs-v2/blog/2022-10-25-column-lineage-demo.mdx",source:"@site/blog/2022-10-25-column-lineage-demo.mdx",title:"Trying Out the New Column Lineage Feature",description:"How to get started with the new column lineage feature in Marquez.",date:"2022-10-25T00:00:00.000Z",formattedDate:"October 25, 2022",tags:[{label:"column lineage",permalink:"/blog/tags/column-lineage"},{label:"Spark",permalink:"/blog/tags/spark"},{label:"releases",permalink:"/blog/tags/releases"},{label:"demos",permalink:"/blog/tags/demos"}],readingTime:4.41,hasTruncateMarker:!0,authors:[{name:"Pawel Leszczynski",title:"Marquez Committer",url:"https://github.com/pawel-big-lebowski",imageURL:"https://github.com/pawel-big-lebowski.png",key:"Leszczynski"},{name:"Michael Robinson",title:"Marquez Community Manager",url:"https://github.com/merobi-hub",imageURL:"https://github.com/merobi-hub.png",key:"Robinson"}],frontMatter:{slug:"column-lineage-demo",description:"How to get started with the new column lineage feature in Marquez.",title:"Trying Out the New Column Lineage Feature",authors:["Leszczynski","Robinson"],tags:["column lineage","Spark","releases","demos"]},prevItem:{title:"Marquez 0.30.0 offers a big performance bump, with some assembly required",permalink:"/blog/version-30-upgrades"},nextItem:{title:"Using the New Soft-delete Feature",permalink:"/blog/soft-delete"}},s={authorsImageUrls:[void 0,void 0]},u=[{value:"Background",id:"background",level:2},{value:"What is column lineage and why is it important?",id:"what-is-column-lineage-and-why-is-it-important",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Next steps",id:"next-steps",level:2},{value:"How to contribute",id:"how-to-contribute",level:2}],p={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Read on to learn how to get started with the new column lineage feature in Marquez."),(0,o.kt)("h2",{id:"background"},"Background"),(0,o.kt)("p",null,"We are excited to announce the addition of column-level lineage to Marquez with the release of 0.27.0. One of our most frequently requested new features, column-level lineage makes dataset column inputs and outputs available via the Marquez API. We\u2019re pleased to be able to share this new feature now, and we welcome contributors to this important development in the project."),(0,o.kt)("p",null,"Our plans for the feature include support beyond the Spark integration as well as UI support for column lineage.  "),(0,o.kt)("h2",{id:"what-is-column-lineage-and-why-is-it-important"},"What is column lineage and why is it important?"),(0,o.kt)("p",null,"Simply put, column lineage is lineage data about columns. This means that in addition to emitting dataset inputs and outputs, the OpenLineage-Spark integration now emits column inputs and outputs. Thanks to this metadata, users can glean information about the input columns that were used to produce the columns of a dataset."),(0,o.kt)("p",null,"A major benefit of column lineage is the finer granularity of the data that one gets thanks to the deeper level of insight into a pipeline. For example, column lineage lets you track the usage of sensitive data, such customers\u2019 personal information, by members of your organization. This capability is essential to meeting some requirements of regulatory bodies such as the ",(0,o.kt)("a",{parentName:"p",href:"https://gdpr-info.eu/"},"GDPR"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.hhs.gov/hipaa/index.html"},"HIPAA"),", ",(0,o.kt)("a",{parentName:"p",href:"https://oag.ca.gov/privacy/ccpa"},"CCPA"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.bis.org/bcbs/"},"BCBS")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.pcisecuritystandards.org/"},"PCI"),", who have instituted requirements for data accuracy and integrity that compel companies and organizations to monitor their datasets and pipelines more closely than in the past. "),(0,o.kt)("h2",{id:"how-it-works"},"How It Works"),(0,o.kt)("p",null,"The spec uses a new facet, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/facets/ColumnLineageDatasetFacet.json"},(0,o.kt)("inlineCode",{parentName:"a"},"ColumnLineageDatasetFacet")),", to store column lineage. For each column of an output dataset, the facet relays a list of columns from the input datasets that were used to produce the column."),(0,o.kt)("p",null,"Here\u2019s the new facet in the OpenLineage spec:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "$id": "https://openlineage.io/spec/facets/1-0-1/ColumnLineageDatasetFacet.json",\n  "$defs": {\n    "ColumnLineageDatasetFacet": {\n      "allOf": [{\n        "$ref": "https://openlineage.io/spec/1-0-2/OpenLineage.json#/$defs/DatasetFacet"\n      }, {\n        "type": "object",\n        "properties": {\n          "fields": {\n            "description": "Column level lineage that maps output fields into input fields used to evaluate them.",\n            "type": "object",\n            "additionalProperties": {\n              "type": "object",\n              "properties": {\n                "inputFields": {\n                  "type": "array",\n                  "items": {\n                    "type": "object",\n                    "properties": {\n                      "namespace": {\n                        "type": "string",\n                        "description": "The input dataset namespace"\n                      },\n                      "name": {\n                        "type": "string",\n                        "description": "The input dataset name"\n                      },\n                      "field": {\n                        "type": "string",\n                        "description": "The input field"\n                      }\n                    },\n                    "additionalProperties": true,\n                    "required": [\n                      "namespace", "name", "field"\n                    ]\n                  }\n                },\n                "transformationDescription": {\n                   "type": "string",\n                   "description": "a string representation of the transformation applied"\n                },\n                "transformationType": {\n                   "type": "string",\n                   "description": "IDENTITY|MASKED reflects a clearly defined behavior. IDENTITY: exact same as input; MASKED: no original data available (like a hash of PII for example)"\n                }\n              },\n              "additionalProperties": true,\n              "required": ["inputFields"]\n            }      \n          }    \n        },\n        "additionalProperties": true,\n        "required": [\n          "fields"\n        ]\n      }],\n      "type": "object"\n    }\n  },\n  "type": "object",\n  "properties": {\n    "columnLineage": {\n      "$ref": "#/$defs/ColumnLineageDatasetFacet"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"As you can see above, two extra fields offer the ability to emit additional information: ",(0,o.kt)("inlineCode",{parentName:"p"},"transformationDescription")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"transformationType"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"transformationDescription")," field emits a string describing the transformations of input columns that have produced an output column. The ",(0,o.kt)("inlineCode",{parentName:"p"},"transformationType")," field, a string field containing either ",(0,o.kt)("inlineCode",{parentName:"p"},"IDENTITY")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"MASKED"),", indicates whether the column data is exactly the same as the input data or if no original data is available (as in the case of encrypted data)."),(0,o.kt)("p",null,"Support for column lineage is currently limited to the Spark integration, which now detects column lineage out of the box. Also, the Marquez API now contains methods to retrieve column lineage in graph form."),(0,o.kt)("p",null,"The new API endpoint (at ",(0,o.kt)("inlineCode",{parentName:"p"},"api/src/main/java/marquez/api/ColumnLineageResource.java"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'public class ColumnLineageResource extends BaseResource {\n\n    private static final String DEFAULT_DEPTH = "20";\n\n    public ColumnLineageResource(@NonNull final ServiceFactory serviceFactory) {\n    super(serviceFactory);\n    }\n\n    @Timed\n    @ResponseMetered\n    @ExceptionMetered\n    @GET\n    @Produces(APPLICATION_JSON)\n    public Response getLineage(\n        @QueryParam("nodeId") @NotNull NodeId nodeId,\n        @QueryParam("depth") @DefaultValue(DEFAULT_DEPTH) int depth,\n        @QueryParam("withDownstream") @DefaultValue("false") boolean withDownstream)\n        throws ExecutionException, InterruptedException {\n    return Response.ok(columnLineageService.lineage(nodeId, depth, withDownstream, Instant.now()))\n        .build();\n    }\n}\n')),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/workshops/tree/main/spark"},"A new workshop")," in the OpenLineage/workshops repository provides an easy way to try out the new feature in a Jupyter Notebook using Git, Docker, and Marquez. "),(0,o.kt)("p",null,"What you\u2019ll need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Docker 17.05+"),(0,o.kt)("li",{parentName:"ul"},"Docker Compose 1.29.1+"),(0,o.kt)("li",{parentName:"ul"},"Git (preinstalled on most versions of MacOS; verify with git version)"),(0,o.kt)("li",{parentName:"ul"},"4 GB of available memory (the minimum for Docker \u2014 more is strongly recommended)")),(0,o.kt)("p",null,"What you\u2019ll learn:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"how to get started with Marquez"),(0,o.kt)("li",{parentName:"ul"},"how to start a Spark context with OpenLineage pointed at Marquez"),(0,o.kt)("li",{parentName:"ul"},"how to run a sample Spark job resulting in a lineage graph"),(0,o.kt)("li",{parentName:"ul"},"how to query the Marquez API for a dataset resource with column lineage included.")),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"Support for column lineage is currently limited to the Spark integration, but we intend to expand the feature. Our plans include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"adding support for column lineage in the UI"),(0,o.kt)("li",{parentName:"ul"},"enabling the SQL Parser to extract column lineage from SQL queries"),(0,o.kt)("li",{parentName:"ul"},"adding the ability to detect sensitive data across all datasets based on column lineage and information about raw data in the ecosystem.")),(0,o.kt)("h2",{id:"how-to-contribute"},"How to contribute"),(0,o.kt)("p",null,"We would love to help others develop the column-level lineage features they need, and we welcome contributions to this ongoing effort at implementing column-level lineage in Marquez! If you have experience doing frontend development, the UI work might be a good place to start. "),(0,o.kt)("p",null,"Does this sound fun? Check out our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MarquezProject/marquez/blob/main/CONTRIBUTING.md"},"new contributor guide")," to get started."))}d.isMDXComponent=!0}}]);