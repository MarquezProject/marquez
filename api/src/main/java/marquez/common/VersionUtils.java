package marquez.common;

import static com.google.common.base.Charsets.UTF_8;
import static java.util.stream.Collectors.joining;
import static marquez.common.Utils.KV_JOINER;
import static marquez.common.models.DatasetType.DB_TABLE;

import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.Nullable;
import lombok.Builder;
import lombok.Getter;
import lombok.NonNull;
import marquez.common.models.DatasetId;
import marquez.common.models.Field;
import marquez.common.models.JobName;
import marquez.common.models.NamespaceName;
import marquez.common.models.RunId;
import marquez.common.models.Version;
import marquez.service.models.DatasetMeta;
import marquez.service.models.DbTableMeta;
import marquez.service.models.LineageEvent;
import marquez.service.models.StreamMeta;
import org.apache.commons.lang3.tuple.Triple;

public class VersionUtils {

  public static final String VERSION_DELIM = ":";
  public static final Joiner VERSION_JOINER = Joiner.on(VERSION_DELIM).skipNulls();

  /**
   * Returns a new {@link Version} object based on the job's namespace, name, inputs and inputs,
   * source code location, and context. A {@link Version} is generated by concatenating the provided
   * job meta together (delimited by a comma). The resulting string is then converted to a {@code
   * byte} array and passed to {@link UUID#nameUUIDFromBytes(byte[])}.
   *
   * @param namespaceName The namespace of the job.
   * @param jobName The name of the job.
   * @param jobInputIds The input dataset IDs for the job.
   * @param jobOutputIds The output dataset IDs for the job.
   * @param jobContext The context of the job.
   * @param jobLocation The source code location for the job.
   * @return A {@link Version} object based on the specified job meta.
   */
  public static Version newJobVersionFor(
      @NonNull final NamespaceName namespaceName,
      @NonNull final JobName jobName,
      @NonNull final ImmutableSet<DatasetId> jobInputIds,
      @NonNull final ImmutableSet<DatasetId> jobOutputIds,
      @NonNull final ImmutableMap<String, String> jobContext,
      @Nullable final String jobLocation) {
    final byte[] bytes =
        VERSION_JOINER
            .join(
                namespaceName.getValue(),
                jobName.getValue(),
                jobInputIds.stream()
                    .sorted()
                    .flatMap(
                        jobInputId ->
                            Stream.of(
                                jobInputId.getNamespace().getValue(),
                                jobInputId.getName().getValue()))
                    .collect(joining(VERSION_DELIM)),
                jobOutputIds.stream()
                    .sorted()
                    .flatMap(
                        jobOutputId ->
                            Stream.of(
                                jobOutputId.getNamespace().getValue(),
                                jobOutputId.getName().getValue()))
                    .collect(joining(VERSION_DELIM)),
                jobLocation,
                KV_JOINER.join(jobContext))
            .getBytes(UTF_8);
    return Version.of(UUID.nameUUIDFromBytes(bytes));
  }

  public static Version newDatasetVersionFor(
      String namespace,
      String sourceName,
      String physicalName,
      String datasetName,
      List<LineageEvent.SchemaField> fields,
      UUID runId) {
    DatasetVersionData data =
        DatasetVersionData.builder()
            .namespace(namespace)
            .sourceName(sourceName)
            .physicalName(physicalName)
            .datasetName(datasetName)
            .schemaFields(fields)
            .runId(runId)
            .build();
    return newDatasetVersionFor(data);
  }

  public static Version newDatasetVersionFor(
      String namespaceName, String datasetName, DatasetMeta datasetMeta) {
    VersionUtils.DatasetVersionData datasetVersionData =
        VersionUtils.DatasetVersionData.builder()
            .datasetName(datasetName)
            .namespace(namespaceName)
            .datasetMeta(datasetMeta)
            .build();
    return newDatasetVersionFor(datasetVersionData);
  }

  private static Version newDatasetVersionFor(DatasetVersionData data) {
    if (data == null) return Version.of(UUID.nameUUIDFromBytes(("".getBytes())));
    final byte[] bytes =
        VERSION_JOINER
            .join(
                data.getNamespace(),
                data.getSourceName(),
                data.getDatasetName(),
                data.getPhysicalName(),
                data.getSchemaLocation(),
                data.getFields().stream()
                    .map(VersionUtils::joinField)
                    .collect(joining(VERSION_DELIM)),
                data.getRunId())
            .getBytes(UTF_8);
    return Version.of(UUID.nameUUIDFromBytes(bytes));
  }

  private static String joinField(Triple<String, String, String> field) {
    return VERSION_JOINER.join(field.getLeft(), field.getMiddle(), field.getRight());
  }

  @Getter
  @Builder
  private static class DatasetVersionData {
    private String namespace;
    private String sourceName;
    private String physicalName;
    private String datasetName;
    private String schemaLocation;
    private Set<Triple<String, String, String>> fields;
    private UUID runId;

    public static class DatasetVersionDataBuilder {
      private static final Function<LineageEvent.SchemaField, Triple<String, String, String>>
          schemaFieldToTripleFunction =
              f -> Triple.of(f.getName(), f.getType(), f.getDescription());
      private static final Function<Field, Triple<String, String, String>> fieldToTripleFunction =
          f ->
              Triple.of(
                  f.getName().getValue(), f.getType().name(), f.getDescription().orElse(null));

      private String sourceName;
      private String physicalName;
      private String schemaLocation;
      private Set<Triple<String, String, String>> fields = ImmutableSet.of();
      private UUID runId;

      public DatasetVersionData.DatasetVersionDataBuilder schemaFields(
          List<LineageEvent.SchemaField> schemaFields) {
        if (schemaFields == null) return this;
        setFields(schemaFields, schemaFieldToTripleFunction);
        return this;
      }

      public DatasetVersionData.DatasetVersionDataBuilder streamMeta(StreamMeta streamMeta) {
        this.sourceName = streamMeta.getSourceName().getValue();
        this.physicalName = streamMeta.getPhysicalName().getValue();
        this.schemaLocation = streamMeta.getSchemaLocation().toString();
        fields(streamMeta.getFields());
        return this;
      }

      public DatasetVersionData.DatasetVersionDataBuilder datasetMeta(DatasetMeta datasetMeta) {
        if (datasetMeta == null) return this;
        return datasetMeta.getType().equals(DB_TABLE)
            ? dbTableMeta((DbTableMeta) datasetMeta)
            : streamMeta((StreamMeta) datasetMeta);
      }

      public DatasetVersionData.DatasetVersionDataBuilder dbTableMeta(DbTableMeta tableMeta) {
        this.sourceName = tableMeta.getSourceName().getValue();
        this.physicalName = tableMeta.getPhysicalName().getValue();
        fields(tableMeta.getFields());
        this.runId = tableMeta.getRunId().map(RunId::getValue).orElse(null);
        return this;
      }

      private DatasetVersionData.DatasetVersionDataBuilder fields(List<Field> fields) {
        if (fields == null) return this;
        setFields(fields, fieldToTripleFunction);
        return this;
      }

      private <T> void setFields(
          List<T> fields, Function<T, Triple<String, String, String>> mapper) {
        if (!this.fields.isEmpty()) {
          throw new IllegalStateException(
              "'fields' and 'schemaFields' methods are mutually exclusive");
        }
        this.fields = fields.stream().map(mapper).collect(Collectors.toCollection(TreeSet::new));
      }
    }
  }
}
