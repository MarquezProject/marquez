/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath 'gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.6.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.10.2'
        classpath 'net.researchgate:gradle-release:2.8.1'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.github.spotbugs'
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'net.researchgate.release'

    compileTestJava.doFirst {
        if (project.hasProperty("jdk8.build") && System.getenv("JDK8_HOME")) {
            println "Switching build to JDK8 installation at ${System.getenv('JDK8_HOME')}"
        }
    }

    project(':api') {
        apply plugin: 'application'
        archivesBaseName = 'marquez-api'
    }

    project(':clients:java') {
        apply plugin: 'java-library'
        archivesBaseName = 'marquez-java'
    }

    project(':integrations:spark') {
        apply plugin: 'java-library'
        archivesBaseName = 'marquez-spark'
    }

    ext {
        lombokVersion = '1.18.18'
        slf4jVersion = '1.7.30'
        isReleaseVersion = !version.endsWith("SNAPSHOT")
    }

    compileJava {
        options.incremental = true
        options.compilerArgs << '-parameters'
        options.encoding = "UTF-8"
        if (project.hasProperty("jdk8.build")) {
            options.fork = true
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    compileTestJava {
        options.incremental = true
        options.compilerArgs << '-parameters'
        options.encoding = "UTF-8"
        if (project.hasProperty("jdk8.build")) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
            options.fork = true
        }
    }

    tasks.withType(Test) {
        if (project.hasProperty("jdk8.build") && System.getenv("JDK8_HOME")) {
            test.executable = "${System.getenv('JDK8_HOME')}/bin/java"
        }
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    release {
        git {
            requireBranch = 'main'
        }
    }

    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
        }
    }

    def reportsDir = "${buildDir}/reports";
    def checkstyleDir = "${reportsDir}/checkstyle";

    checkstyle {
        toolVersion = '8.12'
        configFile = rootProject.file('checkstyle.xml')
    }

    task checkstyle(type: Checkstyle) {
        reports {
            xml.enabled = true
            html.enabled = true
            html.destination = file(checkstyleDir)
        }
    }

    checkstyleMain {
        source = 'src/main/java'
    }

    checkstyleTest {
        source = 'src/test/java'
    }

    spotbugsMain {
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'low'
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugsTest {
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'low'
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    def coverageDir = "${reportsDir}/coverage";

    jacoco {
        toolVersion = '0.8.5'
        reportsDir = file(coverageDir)
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
            html.destination = file(coverageDir)
        }
    }
}
