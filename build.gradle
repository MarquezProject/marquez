/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
import org.apache.tools.ant.filters.*

plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id 'maven-publish'
  id 'signing'
  id 'com.adarshr.test-logger' version '2.1.1'
  id 'com.diffplug.spotless' version '5.8.1'
  id 'com.github.jk1.dependency-license-report' version '1.16'
  id 'com.github.johnrengelman.shadow' version '6.1.0'
  id 'net.researchgate.release' version '2.8.1'
}

repositories {
  mavenLocal()
  mavenCentral()
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

ext {
  dropwizardVersion = '2.0.15'
  jdbi3Version = '3.17.0'
  lombokVersion = '1.18.12'
  prometheusVersion = '0.9.0'
  isReleaseVersion = !version.endsWith('SNAPSHOT')
}

dependencies {
  compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
  compile "io.dropwizard:dropwizard-jdbi3:${dropwizardVersion}"
  compile "io.dropwizard:dropwizard-json-logging:${dropwizardVersion}"
  compile "io.dropwizard:dropwizard-http2:${dropwizardVersion}"
  compile "io.prometheus:simpleclient:${prometheusVersion}"
  compile "io.prometheus:simpleclient_dropwizard:${prometheusVersion}"
  compile "io.prometheus:simpleclient_hotspot:${prometheusVersion}"
  compile "io.prometheus:simpleclient_servlet:${prometheusVersion}"
  compile "org.jdbi:jdbi3-postgres:${jdbi3Version}"
  compile "org.jdbi:jdbi3-sqlobject:${jdbi3Version}"
  compile 'com.google.guava:guava:30.0-jre'
  compile 'org.flywaydb:flyway-core:6.3.0'
  compile 'org.postgresql:postgresql:42.2.5'
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testCompile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
  testCompile 'io.github.marquezproject:marquez-java:0.4.3'
  testCompile "org.jdbi:jdbi3-testing:${jdbi3Version}"
  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:3.11.1'
  testCompile 'org.mockito:mockito-core:3.3.3'
  testCompile 'org.testcontainers:postgresql:1.13.0'
}

compileJava {
  options.incremental = true
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.incremental = true
  options.compilerArgs << '-parameters'
}

task testUnit(type: Test) {
  useJUnit {
    includeCategories 'marquez.UnitTests'
  }
}

task testIntegration(type: Test) {
  useJUnit {
    includeCategories 'marquez.IntegrationTests'
  }
}

task testDataAccess(type: Test) {
  useJUnit {
    includeCategories 'marquez.DataAccessTests'
  }
}

task sourceJar(type: Jar) {
  classifier 'sources'
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier 'javadoc'
  from javadoc.destinationDir
}

release {
  git {
    requireBranch = 'main'
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = 'io.github.marquezproject'
      artifactId = 'marquez'

      from components.java

      artifact sourceJar
      artifact javadocJar

      pom {
        name = 'marquez'
        description = 'Collect, aggregate, and visualize a data ecosystem\'s metadata'
        url = 'https://github.com/MarquezProject/marquez'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'marquezproject'
            name = 'Marquez Project'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/MarquezProject/marquez.git'
          developerConnection = 'scm:git:ssh://github.com:MarquezProject/marquez.git'
          url = 'https://github.com/MarquezProject/marquez'
        }
      }
    }
  }

  processResources {
    filter ReplaceTokens, tokens: [
            "version": project.property("version")
    ]
  }

  repositories {
    maven {
      url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
      credentials {
        username = System.getenv('SONATYPE_NEXUS_USERNAME')
        password = System.getenv('SONATYPE_NEXUS_PASSWORD')
      }
    }
  }
}

signing {
  required { isReleaseVersion }
  sign publishing.publications.mavenJava
}

mainClassName = 'marquez.MarquezApp'

shadowJar {
  baseName = project.name
  classifier = ''
  version = project.version
  transform(ServiceFileTransformer)
  manifest {
    attributes(
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Built-By': System.getProperty('user.name'),
      'Build-Jdk': System.getProperty('java.version'),
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Main-Class': mainClassName)
  }
}

runShadow {
  args = ['server', 'marquez.yml']
}

spotless {
  java {
    googleJavaFormat()
    removeUnusedImports()
  }
}

def reportsDir = "${buildDir}/reports";

def checkstyleDir = "${reportsDir}/checkstyle";

checkstyle {
  toolVersion = '8.12'
  configFile = rootProject.file('checkstyle.xml')
}

task checkstyle(type: Checkstyle) {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file(checkstyleDir)
  }
}

checkstyleMain {
  source = 'src/main/java'
}

checkstyleTest {
  source = 'src/test/java'
}

def coverageDir = "${reportsDir}/coverage";

jacoco {
  toolVersion = '0.8.5'
  reportsDir = file(coverageDir)
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file(coverageDir)
  }
}
