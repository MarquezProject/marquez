/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.12.1'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "com.diffplug.spotless"

    project(':api') {
        apply plugin: 'application'
        archivesBaseName = 'marquez-api'
    }

    project(':clients:java') {
        apply plugin: 'java-library'
        archivesBaseName = 'marquez-java'
    }

    project(':integrations:spark') {
        apply plugin: 'java-library'
        archivesBaseName = 'marquez-spark'
    }

    ext {
        assertjVersion = '3.19.0'
        dropwizardVersion = '2.0.20'
        junit5Version = '5.7.1'
        lombokVersion = '1.18.18'
        mockitoVersion = '3.8.0'
        slf4jVersion = '1.7.30'
        postgresqlVersion = '42.2.19'
        isReleaseVersion = !version.endsWith('SNAPSHOT')
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompile "org.assertj:assertj-core:${assertjVersion}"
        testCompile "org.junit.jupiter:junit-jupiter:${junit5Version}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    compileJava {
        options.incremental = true
        options.compilerArgs << '-parameters'
        options.encoding = "UTF-8"
        if (project.hasProperty("jdk8.build")) {
            options.fork = true
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    compileTestJava.doFirst {
        if (project.hasProperty("jdk8.build") && System.getenv("JDK8_HOME")) {
            println "Switching build to JDK8 installation at ${System.getenv('JDK8_HOME')}"
        }
    }

    compileTestJava {
        options.incremental = true
        options.compilerArgs << '-parameters'
        options.encoding = "UTF-8"
        if (project.hasProperty("jdk8.build")) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
            options.fork = true
        }
    }

    tasks.withType(Test) {
        if (project.hasProperty("jdk8.build") && System.getenv("JDK8_HOME")) {
            test.executable = "${System.getenv('JDK8_HOME')}/bin/java"
        }
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    spotless {
        def disallowWildcardImports = {
            String text = it
            def regex = ~/import .*\.\*;/
            def m = regex.matcher(text)
            if (m.find()) {
                throw new AssertionError("Wildcard imports disallowed - ${m.findAll()}")
            }
        }
        java {
            googleJavaFormat()
            removeUnusedImports()
            custom 'disallowWildcardImports', disallowWildcardImports
        }
    }

    def reportsDir = "${buildDir}/reports";
    def coverageDir = "${reportsDir}/coverage";

    jacoco {
        toolVersion = '0.8.5'
        reportsDir = file(coverageDir)
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
            html.destination = file(coverageDir)
        }
    }
}
